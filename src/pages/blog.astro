---
import BaseLayout from '../layouts/BaseLayout.astro';
import PostPreview from '../components/PostPreview.astro';
import fetchApi from '../lib/strapi';
import type Article from '../interfaces/article';
import '../styles/blog-page.styles.scss';

const pageTitle = "Triplay.ai Blog: Travel Tips & More";
const description = 'Triplay.ai\'s Blog offers a wealth of travel knowledge. Discover tips, tricks, and tales from around the globe.';
const keywords = 'Blog, personal information, data collection, data security, communication, website improvement, service providers, legal reasons, business transfers';
const openGraph = {
	basic: {
		type: 'website',
		title: 'Blog - Triplay.ai Best Playful AI Travel Planning',
		description: 'Stay updated with the latest travel trends, tips, and insights from our AI-driven blog.',
		image: "https://triplay.ai/triplay-logo.svg",
	}
};

const articles = await fetchApi<Article[]>({
	endpoint: 'articles?populate[cover][populate]=true&sort[0]=createdAt:desc&pagination[page]=1&pagination[pageSize]=1000',
	wrappedByKey: 'data',
});
---

<script>
	if(document.readyState === "complete") {
		// Fully loaded!
	}
	else if(document.readyState === "interactive") {
		const posts = document.querySelectorAll('.blog-list-item');
		const showMoreButton = document.getElementById('show-more');

		let visiblePosts = 18; // Начальное количество видимых постов
		showPosts();

		showMoreButton.addEventListener('click', () => {
			visiblePosts += 18; // Увеличиваем количество видимых постов на 18
			showPosts();
		});

		function showPosts() {
			posts.forEach((post, index) => {
				if (index < visiblePosts) {
					post.classList.add('show');
				} else {
					post.classList.remove('show');
				}
			});

			// Показываем кнопку "Show More", если есть еще посты, которые можно отобразить
			if (visiblePosts < posts.length) {
				showMoreButton.style.display = 'block';
			} else {
				showMoreButton.style.display = 'none';
			}
		}
	}
	else {
		// Loading still in progress.
		// To wait for it to complete, add "DOMContentLoaded" or "load" listeners.
		window.addEventListener("DOMContentLoaded", () => {
			// DOM ready! Images, frames, and other subresources are still downloading.
		});
		window.addEventListener("load", () => {
			// Fully loaded!
		});
	}

</script>

<BaseLayout
	pageTitle={pageTitle}
	description={description}
	keywords={keywords}
	openGraph={openGraph}
>
	<div class="blog-page">
		<nav class='breadcrumbs' aria-label='Breadcrumb'>
			<ol class='ul-unstyled breadcrumbs-list' role='list'>
				<li class='breadcrumbs-item'><a href='/'>Main</a></li>
				<li class='breadcrumbs-item'>Blog</li>
			</ol>
		</nav>
		<div class="blog-wrapper">
			<div class="posts-wrapper">
				<h1><a href='/blog/all-posts'>Blog</a></h1>
				{ articles.length &&
					<ul class='ul-unstyled blog-list'>
						{ articles?.map((post: Article, index) =>
							<li class='blog-list-item'>
								<PostPreview post={ post } loading={index < 2 ? 'preload' : 'lazy'} />
							</li>
						) }
					</ul>
				}
				<div style={{display: 'flex', justifyContent: 'center'}}>
					<button
						id="show-more"
						class="tp-button-outline"
					>
						Show more
					</button>
				</div>
			</div>
		</div>
	</div>
</BaseLayout>
